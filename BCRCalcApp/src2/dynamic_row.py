import tkinter as tk
from tkinter import ttk


class DynamicRow(ttk.Frame):
    def __init__(self, container, controller, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        self.controller = controller

        # Named frames
        self.bridge_info_frame = ttk.LabelFrame(self, text="Bridge Information")
        self.condition_state_1_frame = ttk.LabelFrame(self, text="Condition State 1")
        self.condition_state_2_frame = ttk.LabelFrame(self, text="Condition State 2")
        self.condition_state_3_frame = ttk.LabelFrame(self, text="Condition State 3")
        self.condition_state_4_frame = ttk.LabelFrame(self, text="Condition State 4")
        self.actions_frame = ttk.LabelFrame(self, text="Actions")
        self.cost_info_frame = ttk.LabelFrame(self, text="Cost Information")

        # Position frames
        self.bridge_info_frame.grid(column=0, row=0)
        self.condition_state_1_frame.grid(column=1, row=0)
        self.condition_state_2_frame.grid(column=2, row=0)
        self.condition_state_3_frame.grid(column=3, row=0)
        self.condition_state_4_frame.grid(column=4, row=0)
        self.actions_frame.grid(column=5, row=0)
        self.cost_info_frame.grid(column=6, row=0)

        # Dynamic row data
        self.element_type_var = tk.StringVar()
        self.defect_var = tk.StringVar()
        self.bid_item_var = tk.StringVar()
        self.intervention_description_var = tk.StringVar()
        self.unit_of_measure_var = tk.StringVar()
        self.unit_price_var = tk.StringVar()
        self.quantity_var = tk.StringVar()

        # Add widgets to respective frames
        # Bridge Information
        self.bridge_info_frame = ttk.LabelFrame(self, text="Bridge Information")
        self.bridge_info_frame.grid(column=0, row=0, padx=10, pady=10)
        # 1) 2 disabled text boxes displaying active bridge id and uuid.
        self.bridge_id_var = tk.StringVar(value='Active Bridge ID')  # replace with actual value
        self.bridge_uuid_var = tk.StringVar(value='Active Bridge UUID')  # replace with actual value
        self.bridge_id_entry = ttk.Entry(self.bridge_info_frame, textvariable=self.bridge_id_var, state='disabled')
        self.bridge_uuid_entry = ttk.Entry(self.bridge_info_frame, textvariable=self.bridge_uuid_var, state='disabled')

        # 2) Input Box with label "Element Num" - It is a dropdown containing some values.
        self.element_num_var = tk.StringVar()
        self.element_num_label = ttk.Label(self.bridge_info_frame, text="Element Num")
        self.element_num_dropdown = ttk.Combobox(self.bridge_info_frame, textvariable=self.element_num_var, values=['Option 1', 'Option 2', 'Others'], state="readonly")
        self.element_num_dropdown.bind('<<ComboboxSelected>>', self.on_element_num_selected)

        # 3) Input box with label "Element Type" - This is a input box which is autogenerated based on the "Element Num" value.
        self.element_type_var = tk.StringVar()
        self.element_type_label = ttk.Label(self.bridge_info_frame, text="Element Type")
        self.element_type_entry = ttk.Entry(self.bridge_info_frame, textvariable=self.element_type_var, state='disabled')

        # 4) Dropdown with label "Defect Name"
        self.defect_name_var = tk.StringVar()
        self.defect_name_label = ttk.Label(self.bridge_info_frame, text="Defect Name")
        self.defect_name_dropdown = ttk.Combobox(self.bridge_info_frame, textvariable=self.defect_name_var, values=['Defect 1', 'Defect 2'], state="readonly")
        self.defect_name_dropdown.bind('<<ComboboxSelected>>', self.on_defect_name_selected)

        # 5) Disabled Input box with label "Total Quantity" autogenerated when a value in the dropdown "Defect Name" is selected.
        self.total_quantity_var = tk.StringVar()
        self.total_quantity_label = ttk.Label(self.bridge_info_frame, text="Total Quantity")
        self.total_quantity_entry = ttk.Entry(self.bridge_info_frame, textvariable=self.total_quantity_var, state='disabled')

        # 6) Disabled Input box with label "Units" autogenerated when a value in the dropdown "Defect Name" is selected.
        self.units_var = tk.StringVar()
        self.units_label = ttk.Label(self.bridge_info_frame, text="Units")
        self.units_entry = ttk.Entry(self.bridge_info_frame, textvariable=self.units_var, state='disabled')

        # Grid layout
        self.bridge_id_entry.grid(row=0, column=1)
        self.bridge_uuid_entry.grid(row=1, column=1)
        self.element_num_label.grid(row=2, column=0)
        self.element_num_dropdown.grid(row=2, column=1)
        self.element_type_label.grid(row=3, column=0)
        self.element_type_entry.grid(row=3, column=1)
        self.defect_name_label.grid(row=4, column=0)
        self.defect_name_dropdown.grid(row=4, column=1)
        self.total_quantity_label.grid(row=5, column=0)
        self.total_quantity_entry.grid(row=5, column=1)
        self.units_label.grid(row=6, column=0)
        self.units_entry.grid(row=6, column=1)
        
        # Condition State 1
        # Condition State 1 frame
        self.condition_state_1_frame = ttk.LabelFrame(self, text="Condition State 1")
        self.condition_state_1_frame.grid(column=1, row=0, padx=10, pady=10)

        # a) BidItem
        self.cs1_bid_item_var = tk.StringVar()
        self.cs1_bid_item_label = ttk.Label(self.condition_state_1_frame, text="BidItem")
        self.cs1_bid_item_dropdown = ttk.Combobox(self.condition_state_1_frame, textvariable=self.bid_item_var, state='disabled')
        self.cs1_bid_item_dropdown.bind('<<ComboboxSelected>>', self.on_bid_item_selected)

        # b) InterventionDescription
        self.cs1_intervention_description_var = tk.StringVar()
        self.cs1_intervention_description_label = ttk.Label(self.condition_state_1_frame, text="InterventionDescription")
        self.cs1_intervention_description_entry = ttk.Entry(self.condition_state_1_frame, textvariable=self.intervention_description_var, state='disabled')
			 
        # c) cs1_UnitOfMeasure
        self.cs1_unit_of_measure_var = tk.StringVar()
        self.cs1_unit_of_measure_label = ttk.Label(self.condition_state_1_frame, text="UnitOfMeasure")
        self.cs1_unit_of_measure_entry = ttk.Entry(self.condition_state_1_frame, textvariable=self.unit_of_measure_var, state='disabled')
			 
        # d) cs1_UnitPrice
        self.cs1_unit_price_var = tk.StringVar()
        self.cs1_unit_price_label = ttk.Label(self.condition_state_1_frame, text="UnitPrice")
        self.cs1_unit_price_entry = ttk.Entry(self.condition_state_1_frame, textvariable=self.unit_price_var, state='disabled')
			 
        # e) cs1_Quantity
        self.cs1_quantity_var = tk.StringVar()
        self.cs1_quantity_label = ttk.Label(self.condition_state_1_frame, text="Quantity")
        self.cs1_quantity_entry = ttk.Entry(self.condition_state_1_frame, textvariable=self.quantity_var, state='disabled')
			 
        # Grid layout for Condition State 1 frame
        self.cs1_bid_item_label.grid(row=0, column=0)
        self.cs1_bid_item_dropdown.grid(row=0, column=1)
        self.cs1_intervention_description_label.grid(row=1, column=0)
        self.cs1_intervention_description_entry.grid(row=1, column=1)
        self.cs1_unit_of_measure_label.grid(row=2, column=0)
        self.cs1_unit_of_measure_entry.grid(row=2, column=1)
        self.cs1_unit_price_label.grid(row=3, column=0)
        self.cs1_unit_price_entry.grid(row=3, column=1)
        self.cs1_quantity_label.grid(row=4, column=0)
        self.cs1_quantity_entry.grid(row=4, column=1)
        
        # Condition State 2
        self.condition_state_2_frame = ttk.LabelFrame(self, text="Condition State 2")
        self.condition_state_2_frame.grid(column=2, row=0, padx=10, pady=10)

        # a) BidItem
        self.bid_item_2_var = tk.StringVar()
        self.bid_item_2_label = ttk.Label(self.condition_state_2_frame, text="BidItem")
        self.bid_item_2_dropdown = ttk.Combobox(self.condition_state_2_frame, textvariable=self.bid_item_2_var, state='disabled')
        self.bid_item_2_dropdown.bind('<<ComboboxSelected>>', self.on_bid_item_2_selected)

        # b) InterventionDescription
        self.intervention_description_2_var = tk.StringVar()
        self.intervention_description_2_label = ttk.Label(self.condition_state_2_frame, text="InterventionDescription")
        self.intervention_description_2_entry = ttk.Entry(self.condition_state_2_frame, textvariable=self.intervention_description_2_var, state='disabled')

        # c) UnitOfMeasure
        self.unit_of_measure_2_var = tk.StringVar()
        self.unit_of_measure_2_label = ttk.Label(self.condition_state_2_frame, text="UnitOfMeasure")
        self.unit_of_measure_2_entry = ttk.Entry(self.condition_state_2_frame, textvariable=self.unit_of_measure_2_var, state='disabled')

        # d) UnitPrice
        self.unit_price_2_var = tk.StringVar()
        self.unit_price_2_label = ttk.Label(self.condition_state_2_frame, text="UnitPrice")
        self.unit_price_2_entry = ttk.Entry(self.condition_state_2_frame, textvariable=self.unit_price_2_var, state='disabled')

        # e) Quantity
        self.quantity_2_var = tk.StringVar()
        self.quantity_2_label = ttk.Label(self.condition_state_2_frame, text="Quantity")
        self.quantity_2_entry = ttk.Entry(self.condition_state_2_frame, textvariable=self.quantity_2_var, state='disabled')

        # Grid layout for Condition State 2 frame
        self.bid_item_2_label.grid(row=0, column=0)
        self.bid_item_2_dropdown.grid(row=0, column=1)
        self.intervention_description_2_label.grid(row=1, column=0)
        self.intervention_description_2_entry.grid(row=1, column=1)
        self.unit_of_measure_2_label.grid(row=2, column=0)
        self.unit_of_measure_2_entry.grid(row=2, column=1)
        self.unit_price_2_label.grid(row=3, column=0)
        self.unit_price_2_entry.grid(row=3, column=1)
        self.quantity_2_label.grid(row=4, column=0)
        self.quantity_2_entry.grid(row=4, column=1)

        
        # Condition State 3
        condition_state_3_label = ttk.Label(self.condition_state_3_frame, text="Condition State 3")
        condition_state_3_label.pack()
        
        # Condition State 4
        condition_state_4_label = ttk.Label(self.condition_state_4_frame, text="Condition State 4")
        condition_state_4_label.pack()
        
        # Actions
        action_button = ttk.Button(self.actions_frame, text="Perform action")
        action_button.pack()
        
        # Cost Information
        cost_label = ttk.Label(self.cost_info_frame, text="Cost Information")
        cost_label.pack()

    def on_bid_item_selected(self, event):
        selected_bid_item = self.bid_item_var.get()

        # You should replace the following lines with actual calls to your data source
        # to fetch the corresponding data
        self.intervention_description_var.set(f'Description for {selected_bid_item}')
        self.unit_of_measure_var.set(f'Unit for {selected_bid_item}')
        self.unit_price_var.set(f'Price for {selected_bid_item}')

        self.quantity_entry['state'] = 'normal'  # enable Quantity entry

    def on_bid_item_2_selected(self, event):
        selected_bid_item = self.bid_item_2_var.get()

        # You should replace the following lines with actual calls to your data source
        # to fetch the corresponding data
        self.intervention_description_2_var.set(f'Description for {selected_bid_item}')
        self.unit_of_measure_2_var.set(f'Unit for {selected_bid_item}')
        self.unit_price_2_var.set(f'Price for {selected_bid_item}')

        self.quantity_2_entry['state'] = 'normal'  # enable Quantity entry

    
    
    def on_element_num_selected(self, event):
        selected_option = self.element_num_var.get()
        if selected_option == 'Others':
            self.element_type_entry['state'] = 'normal'
        else:
            self.element_type_entry['state'] = 'disabled'

    def on_defect_name_selected(self, event):
        self.total_quantity_var.set('Some value')  # replace with actual value
        self.units_var.set('Some value')  # replace with actual value

    def on_element_type_selected(self, event):
        selected_option = self.element_type_var.get()

        defect_options = ['Defect1', 'Defect2', 'Defect3']  # Replace this with a function call to fetch options from the database
        self.defect_dropdown['values'] = defect_options
        self.defect_dropdown['state'] = 'readonly'

    def on_defect_selected(self, event):
        bid_item_options = ['Bid1', 'Bid2', 'Bid3']  # Replace this with a function call to fetch options from the database
        self.bid_item_dropdown['values'] = bid_item_options
        self.bid_item_dropdown['state'] = 'readonly'

    def on_bid_item_selected(self, event):
        bid_item = self.bid_item_var.get()

        description = 'Demo Description'  # Replace this with a function call to fetch description from the database
        self.intervention_description_var.set(description)

        unit_of_measure = 'Demo Unit'  # Replace this with a function call to fetch unit of measure from the database
        self.unit_of_measure_var.set(unit_of_measure)

        unit_price = '10.00'  # Replace this with a function call to fetch unit price from the database
        self.unit_price_var.set(unit_price)

        self.quantity_entry['state'] = 'normal'

    def calculate_cost(self):
        # Replace with your actual calculation logic
        quantity = int(self.quantity_var.get())
        unit_price = float(self.unit_price_var.get())
        cost = quantity * unit_price
        return cost
